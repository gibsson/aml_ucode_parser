commit 9495ddb654133024a18cdb88e30791c8ccaa88d3
Author: Nanxin Qin <nanxin.qin@amlogic.com>
Date:   Tue May 21 13:47:09 2019 +0800

    v4l: clear unnecessary infos for v4l codec. [1/1]
    
    PD#SWPL-5314
    
    Problem:
    clear unnecessary infos for v4l codec.
    
    Solution:
    1. remove the debug info unnecessary.
    2. add context id for print info.
    3. fixed issue of uv bytesperline.
    
    Verify:
    a311x
    
    Change-Id: Ibc967c55667b34a25d8a21da0b6fed9e37835817
    Signed-off-by: Nanxin Qin <nanxin.qin@amlogic.com>

diff --git a/drivers/amvdec_ports/aml_vcodec_dec.c b/drivers/amvdec_ports/aml_vcodec_dec.c
index 4cd8ce6..a2a1b98 100644
--- a/drivers/amvdec_ports/aml_vcodec_dec.c
+++ b/drivers/amvdec_ports/aml_vcodec_dec.c
@@ -1300,7 +1300,7 @@ static int vidioc_vdec_g_fmt(struct file *file, void *priv,
 		q_data->coded_height = ctx->picinfo.coded_height;
 
 		q_data->bytesperline[0] = ctx->picinfo.coded_width;
-		q_data->bytesperline[1] = ctx->picinfo.coded_height;
+		q_data->bytesperline[1] = ctx->picinfo.coded_width;
 
 		/*
 		 * Width and height are set to the dimensions
diff --git a/drivers/frame_provider/decoder/h264_multi/vmh264.c b/drivers/frame_provider/decoder/h264_multi/vmh264.c
index 8bdc435..9e75e09 100644
--- a/drivers/frame_provider/decoder/h264_multi/vmh264.c
+++ b/drivers/frame_provider/decoder/h264_multi/vmh264.c
@@ -1763,8 +1763,6 @@ static int v4l_get_fb(struct aml_vcodec_ctx *ctx, struct vdec_fb **out)
 
 	ret = ctx->dec_if->get_param(ctx->drv_handle,
 		GET_PARAM_FREE_FRAME_BUFFER, out);
-	if (ret)
-		pr_err("get frame buffer failed.\n");
 
 	return ret;
 }
@@ -1795,7 +1793,8 @@ static int alloc_one_buf_spec_from_queue(struct vdec_h264_hw_s *hw, int idx)
 
 	ret = v4l_get_fb(hw->v4l2_ctx, &fb);
 	if (ret) {
-		pr_err("[%d] get fb fail.\n", ctx->id);
+		dpb_print(DECODE_ID(hw), PRINT_FLAG_ERROR,
+			"[%d] get fb fail.\n", ctx->id);
 		return ret;
 	}
 
diff --git a/drivers/frame_provider/decoder/h265/vh265.c b/drivers/frame_provider/decoder/h265/vh265.c
index e3966f3..25d8b56 100644
--- a/drivers/frame_provider/decoder/h265/vh265.c
+++ b/drivers/frame_provider/decoder/h265/vh265.c
@@ -269,14 +269,14 @@ static u32 pts_unstable;
 #define H265_DEBUG_IGNORE_CONFORMANCE_WINDOW	0x2000000
 #define H265_DEBUG_WAIT_DECODE_DONE_WHEN_STOP   0x4000000
 #ifdef MULTI_INSTANCE_SUPPORT
-#define IGNORE_PARAM_FROM_CONFIG		0x08000000
-#define PRINT_FRAMEBASE_DATA            0x10000000
-#define PRINT_FLAG_VDEC_STATUS             0x20000000
-#define PRINT_FLAG_VDEC_DETAIL             0x40000000
+#define PRINT_FLAG_ERROR		0x0
+#define IGNORE_PARAM_FROM_CONFIG	0x08000000
+#define PRINT_FRAMEBASE_DATA		0x10000000
+#define PRINT_FLAG_VDEC_STATUS		0x20000000
+#define PRINT_FLAG_VDEC_DETAIL		0x40000000
+#define PRINT_FLAG_V4L_DETAIL		0x80000000
 #endif
 
-#define PRINT_FLAG_V4L_DETAIL	(0x80000000)
-
 #define BUF_POOL_SIZE	32
 #define MAX_BUF_NUM 24
 #define MAX_REF_PIC_NUM 24
@@ -1719,8 +1719,6 @@ static int v4l_get_fb(struct aml_vcodec_ctx *ctx, struct vdec_fb **out)
 
 	ret = ctx->dec_if->get_param(ctx->drv_handle,
 		GET_PARAM_FREE_FRAME_BUFFER, out);
-	if (ret)
-		pr_err("get frame buffer failed.\n");
 
 	return ret;
 }
@@ -2913,8 +2911,12 @@ static int cal_current_buf_size(struct hevc_state_s *hevc,
 		buf_stru->mc_buffer_size_h = mc_buffer_size_h;
 		buf_stru->mc_buffer_size_u_v_h = mc_buffer_size_u_v_h;
 	}
-	pr_err("pic width: %d, pic height: %d, headr: %d, body: %d, size h: %d, size uvh: %d, buf size: %x\n",
-		pic_width, pic_height, losless_comp_header_size, losless_comp_body_size, mc_buffer_size_h, mc_buffer_size_u_v_h, buf_size);
+
+	hevc_print(hevc, PRINT_FLAG_V4L_DETAIL,"[%d] pic width: %d, pic height: %d, headr: %d, body: %d, size h: %d, size uvh: %d, buf size: %x\n",
+		((struct aml_vcodec_ctx *)(hevc->v4l2_ctx))->id,
+		pic_width, pic_height, losless_comp_header_size,
+		losless_comp_body_size, mc_buffer_size_h,
+		mc_buffer_size_u_v_h, buf_size);
 
 	return buf_size;
 }
@@ -2938,7 +2940,8 @@ static int alloc_buf(struct hevc_state_s *hevc)
 			if (hevc->is_used_v4l) {
 				ret = v4l_get_fb(hevc->v4l2_ctx, &fb);
 				if (ret) {
-					pr_err("[%d] get fb fail.\n",
+					hevc_print(hevc, PRINT_FLAG_ERROR,
+						"[%d] get fb fail.\n",
 						((struct aml_vcodec_ctx *)
 						(hevc->v4l2_ctx))->id);
 					return ret;
diff --git a/drivers/frame_provider/decoder/vp9/vvp9.c b/drivers/frame_provider/decoder/vp9/vvp9.c
index c0447b2..4355e0c 100644
--- a/drivers/frame_provider/decoder/vp9/vvp9.c
+++ b/drivers/frame_provider/decoder/vp9/vvp9.c
@@ -350,14 +350,13 @@ typedef unsigned short u16;
 #define VP9_DEBUG_CACHE_HIT_RATE         0x2000000
 #define IGNORE_PARAM_FROM_CONFIG         0x8000000
 #ifdef MULTI_INSTANCE_SUPPORT
-#define PRINT_FLAG_ERROR				0
-#define PRINT_FLAG_VDEC_STATUS             0x20000000
-#define PRINT_FLAG_VDEC_DETAIL             0x40000000
-#define PRINT_FLAG_VDEC_DATA             0x80000000
+#define PRINT_FLAG_ERROR		0x0
+#define PRINT_FLAG_V4L_DETAIL		0x10000000
+#define PRINT_FLAG_VDEC_STATUS		0x20000000
+#define PRINT_FLAG_VDEC_DETAIL		0x40000000
+#define PRINT_FLAG_VDEC_DATA		0x80000000
 #endif
 
-#define PRINT_FLAG_V4L_DETAIL	(0)
-
 static u32 debug;
 static bool is_reset;
 /*for debug*/
@@ -1162,8 +1161,6 @@ static int v4l_get_fb(struct aml_vcodec_ctx *ctx, struct vdec_fb **out)
 
 	ret = ctx->dec_if->get_param(ctx->drv_handle,
 		GET_PARAM_FREE_FRAME_BUFFER, out);
-	if (ret)
-		pr_err("get frame buffer failed.\n");
 
 	return ret;
 }
@@ -4576,7 +4573,6 @@ static int config_pic(struct VP9Decoder_s *pbi,
 	int mc_buffer_size_u_v_h = 0;
 	int dw_mode = get_double_write_mode_init(pbi);
 	struct vdec_fb *fb = NULL;
-	pr_err("---%s, %d\n", __func__, __LINE__);
 
 	pbi->lcu_total = lcu_total;
 
@@ -4625,12 +4621,12 @@ static int config_pic(struct VP9Decoder_s *pbi,
 		<= mpred_mv_end
 	) {
 #endif
-		pr_err("---%s, %d, size %d\n", __func__, __LINE__, buf_size);
 		if (buf_size > 0) {
 			if (pbi->is_used_v4l) {
 				ret = v4l_get_fb(pbi->v4l2_ctx, &fb);
 				if (ret) {
-					pr_err("[%d] get fb fail.\n",
+					vp9_print(pbi, PRINT_FLAG_ERROR,
+						"[%d] get fb fail.\n",
 						((struct aml_vcodec_ctx *)
 						(pbi->v4l2_ctx))->id);
 					return ret;
@@ -4765,7 +4761,6 @@ static void init_pic_list(struct VP9Decoder_s *pbi)
 	struct PIC_BUFFER_CONFIG_s *pic_config;
 	u32 header_size;
 	struct vdec_s *vdec = hw_to_vdec(pbi);
-	pr_err("---%s, %d\n", __func__, __LINE__);
 
 	if (pbi->mmu_enable && ((pbi->double_write_mode & 0x10) == 0)) {
 		header_size = vvp9_mmu_compress_header_size(pbi);
@@ -4803,7 +4798,6 @@ static void init_pic_list(struct VP9Decoder_s *pbi)
 		pic_config->y_crop_width = pbi->init_pic_w;
 		pic_config->y_crop_height = pbi->init_pic_h;
 		pic_config->double_write_mode = get_double_write_mode(pbi);
-		pr_err("---%s, %d\n", __func__, __LINE__);
 
 		if (pic_config->double_write_mode) {
 			set_canvas(pbi, pic_config);
@@ -6240,8 +6234,6 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 		return -1;
 	}
 #endif
-	pr_err("---%s, %d\n", __func__, __LINE__);
-
 	if (pbi->save_buffer_mode)
 		pbi->used_buf_num = MAX_BUF_NUM_SAVE_BUF;
 	else
@@ -6251,9 +6243,6 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 		pbi->used_buf_num = MAX_BUF_NUM;
 	if (pbi->used_buf_num > FRAME_BUFFERS)
 		pbi->used_buf_num = FRAME_BUFFERS;
-	pr_err("---%s, %d,  used_buf_num %d\n", __func__, __LINE__, pbi->used_buf_num);
-
-	//init_pic_list(pbi);
 
 	pbi->pts_unstable = ((unsigned long)(pbi->vvp9_amstream_dec_info.param)
 			& 0x40) >> 6;

commit 9eec1046a26feb60fe7705e2ede94c969633daa8
Author: Hui Zhang <hui.zhang@amlogic.com>
Date:   Fri Jun 28 18:00:41 2019 +0800

    vmh264: fix multi-slice error detect issue [1/1]
    
    PD#IPTV-3460
    
    Problem:
    error frame can't detect and display mosiac
    
    Solution:
    fix multi-slice error detect in code
    
    Verify:
    S905L3
    
    Change-Id: Iad5767aa57933d5e0c74195f8fbaec69e23320f7
    Signed-off-by: Hui Zhang <hui.zhang@amlogic.com>

diff --git a/drivers/frame_provider/decoder/h264_multi/h264_dpb.c b/drivers/frame_provider/decoder/h264_multi/h264_dpb.c
index 410efd2..845541e 100644
--- a/drivers/frame_provider/decoder/h264_multi/h264_dpb.c
+++ b/drivers/frame_provider/decoder/h264_multi/h264_dpb.c
@@ -1140,7 +1140,7 @@ static struct StorablePicture *get_new_pic(struct h264_dpb_stru *p_H264_Dpb,
 		s->is_output           = 0;
 		s->pre_output          = 0;
 		s->max_slice_id        = 0;
-		s->data_flag &= ~(ERROR_FLAG | NODISP_FLAG | MAYBE_ERROR_FLAG);
+		s->data_flag &= ~(ERROR_FLAG | NODISP_FLAG);
 #if (MVC_EXTENSION_ENABLE)
 		s->view_id = -1;
 #endif
diff --git a/drivers/frame_provider/decoder/h264_multi/h264_dpb.h b/drivers/frame_provider/decoder/h264_multi/h264_dpb.h
index 39755bd..74fe519 100644
--- a/drivers/frame_provider/decoder/h264_multi/h264_dpb.h
+++ b/drivers/frame_provider/decoder/h264_multi/h264_dpb.h
@@ -755,7 +755,6 @@ struct FrameStore {
 #define IDR_FLAG		0x02
 #define ERROR_FLAG		0x10
 #define NULL_FLAG		0x20
-#define MAYBE_ERROR_FLAG	0x40
 #define NODISP_FLAG		0x80
 	unsigned char data_flag;
 #endif
diff --git a/drivers/frame_provider/decoder/h264_multi/vmh264.c b/drivers/frame_provider/decoder/h264_multi/vmh264.c
index 4d3bbd0..952caee 100644
--- a/drivers/frame_provider/decoder/h264_multi/vmh264.c
+++ b/drivers/frame_provider/decoder/h264_multi/vmh264.c
@@ -5259,18 +5259,15 @@ static void check_decoded_pic_error(struct vdec_h264_hw_s *hw)
 	unsigned mby_mbx = READ_VREG(MBY_MBX);
 	unsigned mb_total = (hw->seq_info2 >> 8) & 0xffff;
 	unsigned decode_mb_count =
-		(((mby_mbx & 0xff) + 1) *
+		((mby_mbx & 0xff) * hw->mb_width +
 		(((mby_mbx >> 8) & 0xff) + 1));
 	if (mby_mbx == 0)
 		return;
 	if (get_cur_slice_picture_struct(p_H264_Dpb) != FRAME)
 		mb_total /= 2;
 	if (error_proc_policy & 0x100) {
-		if (decode_mb_count != mb_total)
+		if (decode_mb_count < mb_total)
 			p->data_flag |= ERROR_FLAG;
-		else if (p->data_flag & MAYBE_ERROR_FLAG)
-			p->data_flag &= ~ERROR_FLAG;
-		p->data_flag &= ~MAYBE_ERROR_FLAG;
 	}
 
 	if ((error_proc_policy & 0x200) &&
@@ -5559,17 +5556,15 @@ static irqreturn_t vh264_isr_thread_fn(struct vdec_s *vdec, int irq)
 				"==================> frame count %d to skip %d\n",
 				hw->decode_pic_count+1,
 				hw->skip_frame_count);
-				} else {
+				} else if (error_proc_policy & 0x100){
 					struct StorablePicture *p =
 						p_H264_Dpb->mVideo.dec_picture;
 					unsigned mby_mbx = READ_VREG(MBY_MBX);
 					unsigned decode_mb_count =
-						(((mby_mbx & 0xff) + 1) *
+						((mby_mbx & 0xff) * hw->mb_width +
 						(((mby_mbx >> 8) & 0xff) + 1));
-					if ((error_proc_policy & 0x100) &&
-						p_H264_Dpb->dpb_param.l.
-						data[FIRST_MB_IN_SLICE]
-						< decode_mb_count) {
+					if ((decode_mb_count < p_H264_Dpb->dpb_param.l.
+						data[FIRST_MB_IN_SLICE])) {
 						dpb_print(DECODE_ID(hw),
 						PRINT_FLAG_VDEC_STATUS,
 						"Error detect! first_mb 0x%x mby_mbx 0x%x decode_mb 0x%x\n",
@@ -5577,12 +5572,10 @@ static irqreturn_t vh264_isr_thread_fn(struct vdec_s *vdec, int irq)
 						data[FIRST_MB_IN_SLICE],
 						READ_VREG(MBY_MBX),
 						decode_mb_count);
-						if (!p_H264_Dpb->dpb_param.l.
-								data[FIRST_MB_IN_SLICE]) {
-							p->data_flag |= ERROR_FLAG;
-							goto pic_done_proc;
-						} else
-							p->data_flag |= MAYBE_ERROR_FLAG;
+						p->data_flag |= ERROR_FLAG;
+					} else if (!p_H264_Dpb->dpb_param.l.data[FIRST_MB_IN_SLICE] && decode_mb_count) {
+						p->data_flag |= ERROR_FLAG;
+						goto pic_done_proc;
 					}
 				}
 

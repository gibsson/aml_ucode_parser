commit 3d58646ade660e8505249cf37caaf11df89d887e
Author: Nanxin Qin <nanxin.qin@amlogic.com>
Date:   Mon Jun 24 13:20:18 2019 +0800

    vp9: fixed issue of the width or height oversize for vp9. [1/1]
    
    PD#OTT-4780
    
    Problem:
    the width or height abnomal cause to cts failed.
    
    Solution:
    fixed issue of the width or height oversize for vp9.
    
    Verify:
    x301
    
    Change-Id: Ie2f53863b64a0deeff02a52b41223fe2466f9b89
    Signed-off-by: Nanxin Qin <nanxin.qin@amlogic.com>

diff --git a/drivers/frame_provider/decoder/vp9/vvp9.c b/drivers/frame_provider/decoder/vp9/vvp9.c
index 75f42a0..a1d8b12 100644
--- a/drivers/frame_provider/decoder/vp9/vvp9.c
+++ b/drivers/frame_provider/decoder/vp9/vvp9.c
@@ -1178,6 +1178,42 @@ struct VP9Decoder_s {
 	struct vframe_qos_s vframe_qos;
 };
 
+static int vp9_print(struct VP9Decoder_s *pbi,
+	int flag, const char *fmt, ...)
+{
+#define HEVC_PRINT_BUF		256
+	unsigned char buf[HEVC_PRINT_BUF];
+	int len = 0;
+
+	if (pbi == NULL ||
+		(flag == 0) ||
+		(debug & flag)) {
+		va_list args;
+
+		va_start(args, fmt);
+		if (pbi)
+			len = sprintf(buf, "[%d]", pbi->index);
+		vsnprintf(buf + len, HEVC_PRINT_BUF - len, fmt, args);
+		pr_debug("%s", buf);
+		va_end(args);
+	}
+	return 0;
+}
+
+static int is_oversize(int w, int h)
+{
+	int max = (get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1)?
+		MAX_SIZE_8K : MAX_SIZE_4K;
+
+	if (w <= 0 || h <= 0)
+		return true;
+
+	if (h != 0 && (w > max / h))
+		return true;
+
+	return false;
+}
+
 static int v4l_get_fb(struct aml_vcodec_ctx *ctx, struct vdec_fb **out)
 {
 	int ret = 0;
@@ -1242,6 +1278,11 @@ static int setup_frame_size(
 
 	width = params->p.width;
 	height = params->p.height;
+	if (is_oversize(width, height)) {
+		vp9_print(pbi, 0, "%s, Error: Invalid frame size\n", __func__);
+		return -1;
+	}
+
 	/*vp9_read_frame_size(rb, &width, &height);*/
 	if (print_header_info)
 		pr_info(" * 16-bits w read : %d (width : %d)\n", width, height);
@@ -1361,8 +1402,8 @@ static int setup_frame_size_with_refs(
 		 */
 	}
 
-	if (width <= 0 || height <= 0) {
-		pr_err("Error: Invalid frame size\r\n");
+	if (is_oversize(width, height)) {
+		vp9_print(pbi, 0, "%s, Error: Invalid frame size\n", __func__);
 		return -1;
 	}
 
@@ -1457,32 +1498,6 @@ static int setup_frame_size_with_refs(
 	return ret;
 }
 
-
-
-
-
-static int vp9_print(struct VP9Decoder_s *pbi,
-	int flag, const char *fmt, ...)
-{
-#define HEVC_PRINT_BUF		256
-	unsigned char buf[HEVC_PRINT_BUF];
-	int len = 0;
-
-	if (pbi == NULL ||
-		(flag == 0) ||
-		(debug & flag)) {
-		va_list args;
-
-		va_start(args, fmt);
-		if (pbi)
-			len = sprintf(buf, "[%d]", pbi->index);
-		vsnprintf(buf + len, HEVC_PRINT_BUF - len, fmt, args);
-		pr_debug("%s", buf);
-		va_end(args);
-	}
-	return 0;
-}
-
 static inline bool close_to(int a, int b, int m)
 {
 	return (abs(a - b) < m) ? true : false;
@@ -4749,20 +4764,6 @@ static int config_pic(struct VP9Decoder_s *pbi,
 	return ret;
 }
 
-static int is_oversize(int w, int h)
-{
-	int max = (get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1)?
-		MAX_SIZE_8K : MAX_SIZE_4K;
-
-	if (w < 0 || h < 0)
-		return true;
-
-	if (h != 0 && (w > max / h))
-		return true;
-
-	return false;
-}
-
 static int vvp9_mmu_compress_header_size(struct VP9Decoder_s *pbi)
 {
 	if ((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&

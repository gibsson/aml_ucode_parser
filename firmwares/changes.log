commit 0c21b9e75c17b8be6243e55fb8d782a9a20ed325
Author: Nanxin Qin <nanxin.qin@amlogic.com>
Date:   Sat May 18 03:22:52 2019 +0800

    firmware: optimize the fw mgt structure and update to ver v0.2. [1/5]
    
    PD#SWPL-8757
    
    Problem:
    1. the video firmware load rules improvement.
    2. the video firmware date redundancy.
    
    Solution:
    1. support the parse of the duplicate fws.
    2. add the firmware for avs multi-inst.
    3. ucode commit id:
       577ef8dd6376f3b4d7ee213f2cbc53d7f51840b6
    
    Verify:
    x301
    
    Change-Id: I1929ebb32037195135f3576c721d26ce6247c625
    Signed-off-by: Nanxin Qin <nanxin.qin@amlogic.com>

diff --git a/drivers/common/firmware/firmware_drv.c b/drivers/common/firmware/firmware_drv.c
index 86988dd..fa21f0c 100644
--- a/drivers/common/firmware/firmware_drv.c
+++ b/drivers/common/firmware/firmware_drv.c
@@ -40,7 +40,7 @@
 #include "../chips/decoder_cpu_ver_info.h"
 
 /* major.minor */
-#define PACK_VERS "v0.1"
+#define PACK_VERS "v0.2"
 
 #define CLASS_NAME	"firmware_codec"
 #define DEV_NAME	"firmware_vdec"
@@ -54,6 +54,8 @@
 /*the first 256 bytes are signature data*/
 #define SEC_OFFSET	(256)
 
+#define TRY_PARSE_MAX	(256)
+
 #define PACK ('P' << 24 | 'A' << 16 | 'C' << 8 | 'K')
 #define CODE ('C' << 24 | 'O' << 16 | 'D' << 8 | 'E')
 
@@ -297,8 +299,12 @@ static void fw_info_walk(void)
 		pr_info("maker: %s.\n",
 			info->data->head.maker);
 		pr_info("from : %s.\n", info->src_from);
-		pr_info("date : %s.\n\n",
+		pr_info("date : %s.\n",
 			info->data->head.date);
+		if (info->data->head.duplicate)
+			pr_info("NOTE : Dup from %s.\n",
+				info->data->head.dup_from);
+		pr_info("\n");
 	}
 }
 
@@ -339,6 +345,9 @@ static ssize_t info_show(struct class *class,
 		goto out;
 	}
 
+	/* shows version of driver. */
+	pr_info("The driver version is %s\n", PACK_VERS);
+
 	list_for_each_entry(info, &mgr->fw_head, node) {
 		if (IS_ERR_OR_NULL(info->data))
 			continue;
@@ -499,10 +508,59 @@ static int fw_data_filter(struct firmware_s *fw,
 	return 0;
 }
 
+static int fw_replace_dup_data(char *buf)
+{
+	int ret = 0;
+	struct fw_mgr_s *mgr = g_mgr;
+	struct package_s *pkg =
+		(struct package_s *) buf;
+	struct package_info_s *pinfo =
+		(struct package_info_s *) pkg->data;
+	struct fw_info_s *info = NULL;
+	char *pdata = pkg->data;
+	int try_cnt = TRY_PARSE_MAX;
+
+	do {
+		if (!pinfo->head.length)
+			break;
+		list_for_each_entry(info, &mgr->fw_head, node) {
+			struct firmware_s *comp = NULL;
+			struct firmware_s *data = NULL;
+			int len = 0;
+
+			comp = (struct firmware_s *)pinfo->data;
+			if (comp->head.duplicate)
+				break;
+
+			if (!info->data->head.duplicate ||
+				comp->head.checksum !=
+				info->data->head.checksum)
+				continue;
+
+			len = pinfo->head.length;
+			data = kzalloc(len, GFP_KERNEL);
+			if (data == NULL) {
+				ret = -ENOMEM;
+				goto out;
+			}
+
+			memcpy(data, pinfo->data, len);
+			memcpy(data, info->data, sizeof(*data));
+
+			kfree(info->data);
+			info->data = data;
+		}
+		pdata += (pinfo->head.length + sizeof(*pinfo));
+		pinfo = (struct package_info_s *)pdata;
+	} while (try_cnt--);
+out:
+	return ret;
+}
+
 static int fw_check_pack_version(char *buf)
 {
 	struct package_s *pack = NULL;
-	int major, minor, major_fw, minor_fw, ver = 0;
+	int major, minor, major_fw, minor_fw;
 	int ret;
 
 	pack = (struct package_s *) buf;
@@ -510,11 +568,6 @@ static int fw_check_pack_version(char *buf)
 	if (ret != 2)
 		return -1;
 
-	ver = (major << 16 | minor);
-
-	if (debug)
-		pr_info("the package has %d fws totally.\n", pack->head.total);
-
 	major_fw = (pack->head.version >> 16) & 0xff;
 	minor_fw = pack->head.version & 0xff;
 
@@ -524,9 +577,16 @@ static int fw_check_pack_version(char *buf)
 		return -1;
 	}
 
-	if (ver != pack->head.version) {
-		pr_info("the fw pack ver v%d.%d is too lower.\n", major_fw, minor_fw);
-		pr_info("it may work abnormally so need to be update in time.\n");
+	if (minor < minor_fw) {
+		pr_info("The fw driver version (v%d.%d) is lower than the pkg version (v%d.%d).\n",
+			major, minor, major_fw, minor_fw);
+		pr_info("The driver version is too low that may affect the work please update asap.\n");
+	}
+
+	if (debug) {
+		pr_info("The package has %d fws totally.\n", pack->head.total);
+		pr_info("The driver ver is v%d.%d\n", major, minor);
+		pr_info("The firmware ver is v%d.%d\n", major_fw, minor_fw);
 	}
 
 	return 0;
@@ -541,7 +601,7 @@ static int fw_package_parse(struct fw_files_s *files,
 	struct firmware_s *data;
 	char *pack_data;
 	int info_len, len;
-	int try_cnt = 100;
+	int try_cnt = TRY_PARSE_MAX;
 	char *path = __getname();
 
 	if (path == NULL)
@@ -588,7 +648,8 @@ static int fw_package_parse(struct fw_files_s *files,
 		pack_data += (pack_info->head.length + info_len);
 		pack_info = (struct package_info_s *)pack_data;
 
-		if (!fw_data_check_sum(data)) {
+		if (!data->head.duplicate &&
+			!fw_data_check_sum(data)) {
 			pr_info("check sum fail !\n");
 			kfree(data);
 			kfree(info);
@@ -604,6 +665,11 @@ static int fw_package_parse(struct fw_files_s *files,
 		info->data = data;
 		fw_add_info(info);
 	} while (try_cnt--);
+
+	/* process the fw of dup attribute. */
+	ret = fw_replace_dup_data(buf);
+	if (ret)
+		pr_err("replace dup fw failed.\n");
 out:
 	__putname(path);
 
diff --git a/drivers/common/firmware/firmware_priv.h b/drivers/common/firmware/firmware_priv.h
index b8c4da8..410745b 100644
--- a/drivers/common/firmware/firmware_priv.h
+++ b/drivers/common/firmware/firmware_priv.h
@@ -66,7 +66,9 @@ struct fw_head_s {
 	int data_size;
 	unsigned int time;
 	char change_id[16];
-	char reserved[112];
+	int duplicate;
+	char dup_from[16];
+	char reserved[92];
 };
 
 struct firmware_s {
diff --git a/drivers/common/firmware/firmware_type.c b/drivers/common/firmware/firmware_type.c
index 609ff6e..e781a51 100644
--- a/drivers/common/firmware/firmware_type.c
+++ b/drivers/common/firmware/firmware_type.c
@@ -39,6 +39,7 @@ static const struct format_name_s format_name[] = {
 	{VIDEO_DEC_AVS,			"avs"},
 	{VIDEO_DEC_AVS_GXM,		"avs_gxm"},
 	{VIDEO_DEC_AVS_NOCABAC,		"avs_no_cabac"},
+	{VIDEO_DEC_AVS_MULTI,		"avs_multi"},
 	{VIDEO_DEC_H264,		"h264"},
 	{VIDEO_DEC_H264_MVC,		"h264_mvc"},
 	{VIDEO_DEC_H264_MVC_GXM,	"h264_mvc_gxm"},
diff --git a/drivers/common/firmware/firmware_type.h b/drivers/common/firmware/firmware_type.h
index 6c1b3f7..c2ef01a 100644
--- a/drivers/common/firmware/firmware_type.h
+++ b/drivers/common/firmware/firmware_type.h
@@ -64,6 +64,8 @@
 #define VIDEO_DEC_MPEG4_5_MULTI		TAG('M', '4', '5', 'M')
 #define VIDEO_DEC_H263_MULTI		TAG('2', '6', '3', 'M')
 #define VIDEO_DEC_HEVC_MMU_SWAP		TAG('2', '6', '5', 'S')
+#define VIDEO_DEC_AVS_MULTI		TAG('A', 'V', 'S', 'M')
+
 /* ... */
 #define FIRMWARE_MAX			(UINT_MAX)
 
diff --git a/drivers/frame_provider/decoder/utils/amvdec.c b/drivers/frame_provider/decoder/utils/amvdec.c
index 1d4e6f5..bf8955e 100644
--- a/drivers/frame_provider/decoder/utils/amvdec.c
+++ b/drivers/frame_provider/decoder/utils/amvdec.c
@@ -393,6 +393,8 @@ s32 optee_load_fw(enum vformat_e type, const char *fw_name)
 	case VFORMAT_AVS:
 		if (!strcmp(name, "avs_no_cabac"))
 			format = VIDEO_DEC_AVS_NOCABAC;
+		else if (!strcmp(name, "avs_multi"))
+			format = VIDEO_DEC_AVS_MULTI;
 		else
 			format = VIDEO_DEC_AVS;
 		break;

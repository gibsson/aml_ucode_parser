commit fb394ef82474134e94fa6f2314c5a16c2af44884
Author: Nanxin.Qin <nanxin.qin@amlogic.com>
Date:   Sun Mar 24 19:36:03 2019 +0800

    decode: bringup tm2. [1/2]
    
    PD#SWPL-5261
    
    Problem:
    bringup tm2.
    
    Solution:
    1. add chip type.
    2. add power ctrl for dos.
    
    Verify:
    AC200
    
    Change-Id: Ie8360008d03f34cca43a066f88773f54d1246978
    Signed-off-by: Nanxin.Qin <nanxin.qin@amlogic.com>

diff --git a/drivers/common/chips/chips.c b/drivers/common/chips/chips.c
index 1fe5107..63d55ba 100644
--- a/drivers/common/chips/chips.c
+++ b/drivers/common/chips/chips.c
@@ -75,6 +75,7 @@ static const struct type_name cpu_type_name[] = {
 	{AM_MESON_CPU_MAJOR_ID_G12B, "g12b"},
 	{AM_MESON_CPU_MAJOR_ID_SM1, "sm1"},
 	{AM_MESON_CPU_MAJOR_ID_TL1, "tl1"},
+	{AM_MESON_CPU_MAJOR_ID_TM2, "tm2"},
 	{0, NULL},
 };
 
diff --git a/drivers/common/chips/decoder_cpu_ver_info.c b/drivers/common/chips/decoder_cpu_ver_info.c
index 08c437a..7818a21 100644
--- a/drivers/common/chips/decoder_cpu_ver_info.c
+++ b/drivers/common/chips/decoder_cpu_ver_info.c
@@ -57,7 +57,10 @@ static enum AM_MESON_CPU_MAJOR_ID cpu_ver_info[AM_MESON_CPU_MAJOR_ID_MAX - MAJOR
 	AM_MESON_CPU_MAJOR_ID_G12B,
 	AM_MESON_CPU_MAJOR_ID_GXLX2,
 	AM_MESON_CPU_MAJOR_ID_SM1,
+	AM_MESON_CPU_MAJOR_ID_RES_0x2c,
+	AM_MESON_CPU_MAJOR_ID_RES_0x2d,
 	AM_MESON_CPU_MAJOR_ID_TL1,
+	AM_MESON_CPU_MAJOR_ID_TM2,
 };
 
 static const struct of_device_id cpu_ver_of_match[] = {
@@ -71,7 +74,7 @@ static const struct of_device_id cpu_ver_of_match[] = {
 		.data = &cpu_ver_info[AM_MESON_CPU_MAJOR_ID_G12A - MAJOR_ID_START],
 	},
 
-    {
+	{
 		.compatible = "amlogic, cpu-major-id-gxl",
 		.data = &cpu_ver_info[AM_MESON_CPU_MAJOR_ID_GXL - MAJOR_ID_START],
 	},
@@ -100,6 +103,10 @@ static const struct of_device_id cpu_ver_of_match[] = {
 		.compatible = "amlogic, cpu-major-id-tl1",
 		.data = &cpu_ver_info[AM_MESON_CPU_MAJOR_ID_TL1 - MAJOR_ID_START],
 	},
+	{
+		.compatible = "amlogic, cpu-major-id-tm2",
+		.data = &cpu_ver_info[AM_MESON_CPU_MAJOR_ID_TM2 - MAJOR_ID_START],
+	},
 	{},
 };
 
@@ -110,23 +117,17 @@ static bool get_cpu_id_from_dtb(enum AM_MESON_CPU_MAJOR_ID *pidType)
 	const struct of_device_id *pMatch = NULL;
 
 	pNode = of_find_node_by_name(NULL, DECODE_CPU_VER_ID_NODE_NAME);
-
-	if (NULL == pNode)
-	{
+	if (NULL == pNode) {
 		pr_err("No find node.\n");
 		return -EINVAL;
 	}
 
 	pDev =  of_find_device_by_node(pNode);
 	if (NULL == pDev)
-	{
 		return -EINVAL;
-	}
 
 	pMatch = of_match_device(cpu_ver_of_match, &pDev->dev);
-
-	if (NULL == pMatch)
-	{
+	if (NULL == pMatch) {
 		pr_err("No find of_match_device\n");
 		return -EINVAL;
 	}
@@ -141,28 +142,20 @@ static void initial_cpu_id(void)
 	enum AM_MESON_CPU_MAJOR_ID id_type = AM_MESON_CPU_MAJOR_ID_MAX;
 
 	if (AM_SUCESS == get_cpu_id_from_dtb(&id_type))
-	{
 		cpu_ver_id = id_type;
-	}else
-	{
+	else
 		cpu_ver_id = (enum AM_MESON_CPU_MAJOR_ID)get_cpu_type();
-	}
 
 	if (AM_MESON_CPU_MAJOR_ID_G12B == cpu_ver_id)
-	{
 		if (is_meson_rev_b())
-		cpu_ver_id = AM_MESON_CPU_MAJOR_ID_TL1;
-	}
+			cpu_ver_id = AM_MESON_CPU_MAJOR_ID_TL1;
 }
 
 enum AM_MESON_CPU_MAJOR_ID get_cpu_major_id(void)
 {
 	if (AM_MESON_CPU_MAJOR_ID_MAX == cpu_ver_id)
-	{
 		initial_cpu_id();
-	}
 
 	return cpu_ver_id;
 }
-
 EXPORT_SYMBOL(get_cpu_major_id);
diff --git a/drivers/common/chips/decoder_cpu_ver_info.h b/drivers/common/chips/decoder_cpu_ver_info.h
index 7b9f187..494f5f6 100644
--- a/drivers/common/chips/decoder_cpu_ver_info.h
+++ b/drivers/common/chips/decoder_cpu_ver_info.h
@@ -22,29 +22,32 @@
 
 enum AM_MESON_CPU_MAJOR_ID
 {
-	AM_MESON_CPU_MAJOR_ID_M6 = 0x16,
-	AM_MESON_CPU_MAJOR_ID_M6TV = 0x17,
-	AM_MESON_CPU_MAJOR_ID_M6TVL = 0x18,
-	AM_MESON_CPU_MAJOR_ID_M8 = 0x19,
-	AM_MESON_CPU_MAJOR_ID_MTVD = 0x1A,
-	AM_MESON_CPU_MAJOR_ID_M8B =  0x1B,
-	AM_MESON_CPU_MAJOR_ID_MG9TV = 0x1C,
-	AM_MESON_CPU_MAJOR_ID_M8M2 = 0x1D,
-	AM_MESON_CPU_MAJOR_ID_UNUSE = 0x1E,
-	AM_MESON_CPU_MAJOR_ID_GXBB = 0x1F,
-	AM_MESON_CPU_MAJOR_ID_GXTVBB = 0x20,
-	AM_MESON_CPU_MAJOR_ID_GXL = 0x21,
-	AM_MESON_CPU_MAJOR_ID_GXM = 0x22,
-	AM_MESON_CPU_MAJOR_ID_TXL = 0x23,
-	AM_MESON_CPU_MAJOR_ID_TXLX = 0x24,
-	AM_MESON_CPU_MAJOR_ID_AXG = 0x25,
-	AM_MESON_CPU_MAJOR_ID_GXLX = 0x26,
-	AM_MESON_CPU_MAJOR_ID_TXHD = 0x27,
-	AM_MESON_CPU_MAJOR_ID_G12A = 0x28,
-	AM_MESON_CPU_MAJOR_ID_G12B = 0x29,
-	AM_MESON_CPU_MAJOR_ID_GXLX2 = 0x2a,
-	AM_MESON_CPU_MAJOR_ID_SM1 = 0x2b,
-	AM_MESON_CPU_MAJOR_ID_TL1 = 0x2e,
+	AM_MESON_CPU_MAJOR_ID_M6	= 0x16,
+	AM_MESON_CPU_MAJOR_ID_M6TV	= 0x17,
+	AM_MESON_CPU_MAJOR_ID_M6TVL	= 0x18,
+	AM_MESON_CPU_MAJOR_ID_M8	= 0x19,
+	AM_MESON_CPU_MAJOR_ID_MTVD	= 0x1A,
+	AM_MESON_CPU_MAJOR_ID_M8B	= 0x1B,
+	AM_MESON_CPU_MAJOR_ID_MG9TV	= 0x1C,
+	AM_MESON_CPU_MAJOR_ID_M8M2	= 0x1D,
+	AM_MESON_CPU_MAJOR_ID_UNUSE	= 0x1E,
+	AM_MESON_CPU_MAJOR_ID_GXBB	= 0x1F,
+	AM_MESON_CPU_MAJOR_ID_GXTVBB	= 0x20,
+	AM_MESON_CPU_MAJOR_ID_GXL	= 0x21,
+	AM_MESON_CPU_MAJOR_ID_GXM	= 0x22,
+	AM_MESON_CPU_MAJOR_ID_TXL	= 0x23,
+	AM_MESON_CPU_MAJOR_ID_TXLX	= 0x24,
+	AM_MESON_CPU_MAJOR_ID_AXG	= 0x25,
+	AM_MESON_CPU_MAJOR_ID_GXLX	= 0x26,
+	AM_MESON_CPU_MAJOR_ID_TXHD	= 0x27,
+	AM_MESON_CPU_MAJOR_ID_G12A	= 0x28,
+	AM_MESON_CPU_MAJOR_ID_G12B	= 0x29,
+	AM_MESON_CPU_MAJOR_ID_GXLX2	= 0x2a,
+	AM_MESON_CPU_MAJOR_ID_SM1	= 0x2b,
+	AM_MESON_CPU_MAJOR_ID_RES_0x2c,
+	AM_MESON_CPU_MAJOR_ID_RES_0x2d,
+	AM_MESON_CPU_MAJOR_ID_TL1	= 0x2e,
+	AM_MESON_CPU_MAJOR_ID_TM2	= 0x2f,
 	AM_MESON_CPU_MAJOR_ID_MAX,
 };
 
diff --git a/drivers/common/firmware/firmware_type.c b/drivers/common/firmware/firmware_type.c
index 882be8c..609ff6e 100644
--- a/drivers/common/firmware/firmware_type.c
+++ b/drivers/common/firmware/firmware_type.c
@@ -60,18 +60,19 @@ static const struct format_name_s format_name[] = {
 };
 
 static const struct cpu_type_s cpu_type[] = {
-	{AM_MESON_CPU_MAJOR_ID_GXL,		"gxl"},
-	{AM_MESON_CPU_MAJOR_ID_GXM,		"gxm"},
-	{AM_MESON_CPU_MAJOR_ID_TXL,		"txl"},
+	{AM_MESON_CPU_MAJOR_ID_GXL,	"gxl"},
+	{AM_MESON_CPU_MAJOR_ID_GXM,	"gxm"},
+	{AM_MESON_CPU_MAJOR_ID_TXL,	"txl"},
 	{AM_MESON_CPU_MAJOR_ID_TXLX,	"txlx"},
-	{AM_MESON_CPU_MAJOR_ID_AXG,		"axg"},
+	{AM_MESON_CPU_MAJOR_ID_AXG,	"axg"},
 	{AM_MESON_CPU_MAJOR_ID_GXLX,	"gxlx"},
 	{AM_MESON_CPU_MAJOR_ID_TXHD,	"txhd"},
 	{AM_MESON_CPU_MAJOR_ID_G12A,	"g12a"},
 	{AM_MESON_CPU_MAJOR_ID_G12B,	"g12b"},
 	{AM_MESON_CPU_MAJOR_ID_GXLX2,	"gxlx2"},
-	{AM_MESON_CPU_MAJOR_ID_SM1,		"sm1"},
-	{AM_MESON_CPU_MAJOR_ID_TL1,		"tl1"},
+	{AM_MESON_CPU_MAJOR_ID_SM1,	"sm1"},
+	{AM_MESON_CPU_MAJOR_ID_TL1,	"tl1"},
+	{AM_MESON_CPU_MAJOR_ID_TM2,	"tm2"},
 };
 
 const char *get_fw_format_name(unsigned int format)
diff --git a/drivers/common/media_clock/clk/clkg12.c b/drivers/common/media_clock/clk/clkg12.c
index eeb6d29..f045bd3 100644
--- a/drivers/common/media_clock/clk/clkg12.c
+++ b/drivers/common/media_clock/clk/clkg12.c
@@ -719,7 +719,8 @@ static int vdec_clock_set(int clk)
 		clk = 667;
 	}
 
-	if (get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1)
+	if (get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1 &&
+		get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1)
 		clk = 800;
 
 	if (set_frq_enable && vdec_frq) {
@@ -1014,6 +1015,7 @@ static int vdec_clock_get(enum vdec_type_e core)
 	AM_MESON_CPU_MAJOR_ID_G12B,\
 	AM_MESON_CPU_MAJOR_ID_SM1,\
 	AM_MESON_CPU_MAJOR_ID_TL1,\
+	AM_MESON_CPU_MAJOR_ID_TM2,\
 	0}
 #include "clk.h"
 
diff --git a/drivers/frame_provider/decoder/utils/vdec.c b/drivers/frame_provider/decoder/utils/vdec.c
index 2c7cfe8..e5be3ae 100644
--- a/drivers/frame_provider/decoder/utils/vdec.c
+++ b/drivers/frame_provider/decoder/utils/vdec.c
@@ -70,6 +70,10 @@
 #include "../../../common/chips/decoder_cpu_ver_info.h"
 #include "frame_check.h"
 
+#ifdef CONFIG_AMLOGIC_POWER
+#include <linux/amlogic/power_ctrl.h>
+#endif
+
 static DEFINE_MUTEX(vdec_mutex);
 
 #define MC_SIZE (4096 * 4)
@@ -2820,6 +2824,8 @@ void vdec_poweron(enum vdec_type_e core)
 	dma_addr_t decomp_dma_addr;
 	u32 decomp_addr_aligned = 0;
 	int hevc_loop = 0;
+	int sleep_val, iso_val;
+	bool is_power_ctrl_ver2 = false;
 
 	if (core >= VDEC_MAX)
 		return;
@@ -2837,6 +2843,10 @@ void vdec_poweron(enum vdec_type_e core)
 		return;
 	}
 
+	is_power_ctrl_ver2 =
+		((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&
+		(get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1)) ? true : false;
+
 	if (hevc_workaround_needed() &&
 		(core == VDEC_HEVC)) {
 		decomp_addr = codec_mm_dma_alloc_coherent(MEM_NAME,
@@ -2852,11 +2862,25 @@ void vdec_poweron(enum vdec_type_e core)
 	}
 
 	if (core == VDEC_1) {
+		sleep_val = is_power_ctrl_ver2 ? 0x2 : 0xc;
+		iso_val = is_power_ctrl_ver2 ? 0x2 : 0xc0;
+
 		/* vdec1 power on */
+#ifdef CONFIG_AMLOGIC_POWER
+		if (is_support_power_ctrl()) {
+			if (power_ctrl_sleep_mask(true, sleep_val, 0)) {
+				mutex_unlock(&vdec_mutex);
+				pr_err("vdec-1 power on ctrl sleep fail.\n");
+				return;
+			}
+		} else {
+			WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+		}
+#else
 		WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? ~0x2 : ~0xc));
+			READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+#endif
 		/* wait 10uS */
 		udelay(10);
 		/* vdec1 soft reset */
@@ -2872,11 +2896,23 @@ void vdec_poweron(enum vdec_type_e core)
 		vdec_clock_hi_enable();
 		/* power up vdec memories */
 		WRITE_VREG(DOS_MEM_PD_VDEC, 0);
+
 		/* remove vdec1 isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+		if (is_support_power_ctrl()) {
+			if (power_ctrl_iso_mask(true, iso_val, 0)) {
+				mutex_unlock(&vdec_mutex);
+				pr_err("vdec-1 power on ctrl iso fail.\n");
+				return;
+			}
+		} else {
+			WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+				READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+		}
+#else
 		WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-				READ_AOREG(AO_RTI_GEN_PWR_ISO0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? ~0x2 : ~0xC0));
+			READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+#endif
 		/* reset DOS top registers */
 		WRITE_VREG(DOS_VDEC_MCRCC_STALL_CTRL, 0);
 		if (get_cpu_major_id() >=
@@ -2915,11 +2951,25 @@ void vdec_poweron(enum vdec_type_e core)
 		}
 	} else if (core == VDEC_HCODEC) {
 		if (has_hdec()) {
+			sleep_val = is_power_ctrl_ver2 ? 0x1 : 0x3;
+			iso_val = is_power_ctrl_ver2 ? 0x1 : 0x30;
+
 			/* hcodec power on */
+#ifdef CONFIG_AMLOGIC_POWER
+			if (is_support_power_ctrl()) {
+				if (power_ctrl_sleep_mask(true, sleep_val, 0)) {
+					mutex_unlock(&vdec_mutex);
+					pr_err("hcodec power on ctrl sleep fail.\n");
+					return;
+				}
+			} else {
+				WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+					READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+			}
+#else
 			WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? ~0x1 : ~0x3));
+				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+#endif
 			/* wait 10uS */
 			udelay(10);
 			/* hcodec soft reset */
@@ -2930,21 +2980,46 @@ void vdec_poweron(enum vdec_type_e core)
 			/* power up hcodec memories */
 			WRITE_VREG(DOS_MEM_PD_HCODEC, 0);
 			/* remove hcodec isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+			if (is_support_power_ctrl()) {
+				if (power_ctrl_iso_mask(true, iso_val, 0)) {
+					mutex_unlock(&vdec_mutex);
+					pr_err("hcodec power on ctrl iso fail.\n");
+					return;
+				}
+			} else {
+				WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+					READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+			}
+#else
 			WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-				READ_AOREG(AO_RTI_GEN_PWR_ISO0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? ~0x1 : ~0x30));
+				READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+#endif
 		}
 	} else if (core == VDEC_HEVC) {
 		if (has_hevc_vdec()) {
 			bool hevc_fixed = false;
 
+			sleep_val = is_power_ctrl_ver2 ? 0x4 : 0xc0;
+			iso_val = is_power_ctrl_ver2 ? 0x4 : 0xc00;
+
 			while (!hevc_fixed) {
 				/* hevc power on */
+#ifdef CONFIG_AMLOGIC_POWER
+				if (is_support_power_ctrl()) {
+					if (power_ctrl_sleep_mask(true, sleep_val, 0)) {
+						mutex_unlock(&vdec_mutex);
+						pr_err("hevc power on ctrl sleep fail.\n");
+						return;
+					}
+				} else {
+					WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+						READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+				}
+#else
 				WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-					READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-					(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-					? ~0x4 : ~0xc0));
+					READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~sleep_val);
+#endif
 				/* wait 10uS */
 				udelay(10);
 				/* hevc soft reset */
@@ -2959,11 +3034,21 @@ void vdec_poweron(enum vdec_type_e core)
 				/* power up hevc memories */
 				WRITE_VREG(DOS_MEM_PD_HEVC, 0);
 				/* remove hevc isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+				if (is_support_power_ctrl()) {
+					if (power_ctrl_iso_mask(true, iso_val, 0)) {
+						mutex_unlock(&vdec_mutex);
+						pr_err("hevc power on ctrl iso fail.\n");
+						return;
+					}
+				} else {
+					WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+						READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+				}
+#else
 				WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-					READ_AOREG(AO_RTI_GEN_PWR_ISO0) &
-					(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-					? ~0x4 : ~0xc00));
-
+					READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~iso_val);
+#endif
 				if (!hevc_workaround_needed())
 					break;
 
@@ -3015,6 +3100,9 @@ EXPORT_SYMBOL(vdec_poweron);
 
 void vdec_poweroff(enum vdec_type_e core)
 {
+	int sleep_val, iso_val;
+	bool is_power_ctrl_ver2 = false;
+
 	if (core >= VDEC_MAX)
 		return;
 
@@ -3026,7 +3114,14 @@ void vdec_poweroff(enum vdec_type_e core)
 		return;
 	}
 
+	is_power_ctrl_ver2 =
+		((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&
+		(get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1)) ? true : false;
+
 	if (core == VDEC_1) {
+		sleep_val = is_power_ctrl_ver2 ? 0x2 : 0xc;
+		iso_val = is_power_ctrl_ver2 ? 0x2 : 0xc0;
+
 		if (get_cpu_major_id() >=
 			AM_MESON_CPU_MAJOR_ID_GXBB) {
 			/* disable VDEC_1 DMC REQ*/
@@ -3039,19 +3134,41 @@ void vdec_poweroff(enum vdec_type_e core)
 			udelay(10);
 		}
 		/* enable vdec1 isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+		if (is_support_power_ctrl()) {
+			if (power_ctrl_iso_mask(false, iso_val, 0)) {
+				mutex_unlock(&vdec_mutex);
+				pr_err("vdec-1 power off ctrl iso fail.\n");
+				return;
+			}
+		} else {
+			WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+				READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+		}
+#else
 		WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-				READ_AOREG(AO_RTI_GEN_PWR_ISO0) |
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? 0x2 : 0xc0));
+			READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+#endif
 		/* power off vdec1 memories */
 		WRITE_VREG(DOS_MEM_PD_VDEC, 0xffffffffUL);
 		/* disable vdec1 clock */
 		vdec_clock_off();
 		/* vdec1 power off */
+#ifdef CONFIG_AMLOGIC_POWER
+		if (is_support_power_ctrl()) {
+			if (power_ctrl_sleep_mask(false, sleep_val, 0)) {
+				mutex_unlock(&vdec_mutex);
+				pr_err("vdec-1 power off ctrl sleep fail.\n");
+				return;
+			}
+		} else {
+			WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+		}
+#else
 		WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) |
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? 0x2 : 0xc));
+			READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+#endif
 	} else if (core == VDEC_2) {
 		if (has_vdec2()) {
 			/* enable vdec2 isolation */
@@ -3069,42 +3186,92 @@ void vdec_poweroff(enum vdec_type_e core)
 		}
 	} else if (core == VDEC_HCODEC) {
 		if (has_hdec()) {
+			sleep_val = is_power_ctrl_ver2 ? 0x1 : 0x3;
+			iso_val = is_power_ctrl_ver2 ? 0x1 : 0x30;
+
 			/* enable hcodec isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+			if (is_support_power_ctrl()) {
+				if (power_ctrl_iso_mask(false, iso_val, 0)) {
+					mutex_unlock(&vdec_mutex);
+					pr_err("hcodec power off ctrl iso fail.\n");
+					return;
+				}
+			} else {
+				WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+					READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+			}
+#else
 			WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-				READ_AOREG(AO_RTI_GEN_PWR_ISO0) |
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? 0x1 : 0x30));
+				READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+#endif
 			/* power off hcodec memories */
 			WRITE_VREG(DOS_MEM_PD_HCODEC, 0xffffffffUL);
 			/* disable hcodec clock */
 			hcodec_clock_off();
 			/* hcodec power off */
+#ifdef CONFIG_AMLOGIC_POWER
+			if (is_support_power_ctrl()) {
+				if (power_ctrl_sleep_mask(false, sleep_val, 0)) {
+					mutex_unlock(&vdec_mutex);
+					pr_err("hcodec power off ctrl sleep fail.\n");
+					return;
+				}
+			} else {
+				WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+					READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+			}
+#else
 			WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) |
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? 0x1 : 3));
+				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+#endif
 		}
 	} else if (core == VDEC_HEVC) {
 		if (has_hevc_vdec()) {
+			sleep_val = is_power_ctrl_ver2 ? 0x4 : 0xc0;
+			iso_val = is_power_ctrl_ver2 ? 0x4 : 0xc00;
+
 			if (no_powerdown == 0) {
 				/* enable hevc isolation */
+#ifdef CONFIG_AMLOGIC_POWER
+				if (is_support_power_ctrl()) {
+					if (power_ctrl_iso_mask(false, iso_val, 0)) {
+						mutex_unlock(&vdec_mutex);
+						pr_err("hevc power off ctrl iso fail.\n");
+						return;
+					}
+				} else {
+					WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
+						READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+				}
+#else
 				WRITE_AOREG(AO_RTI_GEN_PWR_ISO0,
-					READ_AOREG(AO_RTI_GEN_PWR_ISO0) |
-					(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-					? 0x4 : 0xc00));
-			/* power off hevc memories */
-			WRITE_VREG(DOS_MEM_PD_HEVC, 0xffffffffUL);
-
-			/* disable hevc clock */
-			hevc_clock_off();
-			if (get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_G12A)
-				hevc_back_clock_off();
+					READ_AOREG(AO_RTI_GEN_PWR_ISO0) | iso_val);
+#endif
+				/* power off hevc memories */
+				WRITE_VREG(DOS_MEM_PD_HEVC, 0xffffffffUL);
 
-			/* hevc power off */
-			WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
-				READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) |
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
-				? 0x4 : 0xc0));
+				/* disable hevc clock */
+				hevc_clock_off();
+				if (get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_G12A)
+					hevc_back_clock_off();
+
+				/* hevc power off */
+#ifdef CONFIG_AMLOGIC_POWER
+				if (is_support_power_ctrl()) {
+					if (power_ctrl_sleep_mask(false, sleep_val, 0)) {
+						mutex_unlock(&vdec_mutex);
+						pr_err("hevc power off ctrl sleep fail.\n");
+						return;
+					}
+				} else {
+					WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+						READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+				}
+#else
+				WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0,
+					READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | sleep_val);
+#endif
 			} else {
 				pr_info("!!!!!!!!not power down\n");
 				hevc_reset_core(NULL);
@@ -3122,7 +3289,8 @@ bool vdec_on(enum vdec_type_e core)
 
 	if (core == VDEC_1) {
 		if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-			(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
+			(((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&
+			(get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1))
 			? 0x2 : 0xc)) == 0) &&
 			(READ_HHI_REG(HHI_VDEC_CLK_CNTL) & 0x100))
 			ret = true;
@@ -3135,7 +3303,8 @@ bool vdec_on(enum vdec_type_e core)
 	} else if (core == VDEC_HCODEC) {
 		if (has_hdec()) {
 			if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
+				(((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&
+				(get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1))
 				? 0x1 : 0x3)) == 0) &&
 				(READ_HHI_REG(HHI_VDEC_CLK_CNTL) & 0x1000000))
 				ret = true;
@@ -3143,7 +3312,8 @@ bool vdec_on(enum vdec_type_e core)
 	} else if (core == VDEC_HEVC) {
 		if (has_hevc_vdec()) {
 			if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) &
-				(get_cpu_major_id() == AM_MESON_CPU_MAJOR_ID_SM1
+				(((get_cpu_major_id() >= AM_MESON_CPU_MAJOR_ID_SM1) &&
+				(get_cpu_major_id() != AM_MESON_CPU_MAJOR_ID_TL1))
 				? 0x4 : 0xc0)) == 0) &&
 				(READ_HHI_REG(HHI_VDEC2_CLK_CNTL) & 0x1000000))
 				ret = true;

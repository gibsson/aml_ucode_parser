commit 00890de05d686e5f0a094a2aba5a12e821a39e32
Author: shihong.zheng <shihong.zheng@amlogic.com>
Date:   Sat Aug 17 15:33:21 2019 +0800

    esparser: fix vp9 play abnormal. [1/1]
    
    PD#SWPL-12692
    
    Problem:
    vp9 play abnormal, data dropped at end
    when threadrw workqueue wirte bitstream.
    int type implicit convert to size_t when
    compare with size_t type.
    
    Solution:
    firstly check ret less than 0, avoid
    complicit convert to size_t int 64bit
    when compare with left which is size_t type.
    
    Verify:
    p212
    
    Change-Id: I8942ea23c2e711d084971bbbde63e3374b4a9b6b
    Signed-off-by: shihong.zheng <shihong.zheng@amlogic.com>

diff --git a/drivers/stream_input/parser/thread_rw.c b/drivers/stream_input/parser/thread_rw.c
index dd147a7..4e4864f 100644
--- a/drivers/stream_input/parser/thread_rw.c
+++ b/drivers/stream_input/parser/thread_rw.c
@@ -151,6 +151,7 @@ static ssize_t threadrw_write_in(
 {
 	int ret = 0;
 	int off = 0;
+	/* int change to size_t for buffer overflow on OTT-5057 */
 	size_t left = count;
 	int wait_num = 0;
 	unsigned long flags;
@@ -159,14 +160,11 @@ static ssize_t threadrw_write_in(
 		ret = threadrw_write_onece(task,
 				task->file,
 				stbuf, buf + off, left);
-		if (ret >= left) {
-			off = count;
-			left = 0;
-		} else if (ret > 0) {
-			off += ret;
-			left -= ret;
 
-		} else if (ret < 0) {
+		/* firstly check ret < 0, avoid the risk of -EAGAIN in ret
+		 * implicit convert to size_t when compare with "size_t left".
+		 */
+		if (ret < 0) {
 			if (off > 0) {
 				break;	/*have write ok some data. */
 			} else if (ret == -EAGAIN) {
@@ -183,6 +181,12 @@ static ssize_t threadrw_write_in(
 				break;
 			}
 			break;	/*to end */
+		} else if (ret >= left) {
+			off = count;
+			left = 0;
+		} else if (ret > 0) {
+			off += ret;
+			left -= ret;
 		}
 	}
 

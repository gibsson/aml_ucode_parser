commit 5f165f390820fea8b70b91b227d4b7a75a96c08f
Author: Hui Zhang <hui.zhang@amlogic.com>
Date:   Thu Apr 25 12:42:42 2019 +0800

    media_module: fix hevc front dmc warnning [1/1]
    
    PD#TV-4658
    
    Problem:
    in decoder driver. some dma bufs kmalloc from system. and also
    used for dma data transfer.DMC will show waining HEVC front
    ther is a risk of memory pollution
    
    Solution:
    to avoid this risk. we used dma_coherent to alloc dma buf
    instead of kmalloc
    
    Verify:
    X301
    
    Change-Id: I31d41ef973e9cbe46bba77b286dbeea2c650cffb
    Signed-off-by: Hui Zhang <hui.zhang@amlogic.com>

diff --git a/drivers/frame_provider/decoder/avs2/vavs2.c b/drivers/frame_provider/decoder/avs2/vavs2.c
index 93ef7b1..37b9224 100644
--- a/drivers/frame_provider/decoder/avs2/vavs2.c
+++ b/drivers/frame_provider/decoder/avs2/vavs2.c
@@ -3762,10 +3762,9 @@ static void avs2_local_uninit(struct AVS2Decoder_s *dec)
 	dec->rpm_ptr = NULL;
 	dec->lmem_ptr = NULL;
 	if (dec->rpm_addr) {
-		dma_unmap_single(amports_get_dma_device(),
-			dec->rpm_phy_addr, RPM_BUF_SIZE,
-				DMA_FROM_DEVICE);
-		kfree(dec->rpm_addr);
+		dma_free_coherent(amports_get_dma_device(),
+						RPM_BUF_SIZE, dec->rpm_addr,
+						dec->rpm_phy_addr);
 		dec->rpm_addr = NULL;
 	}
 	if (dec->lmem_addr) {
@@ -3875,25 +3874,15 @@ static int avs2_local_init(struct AVS2Decoder_s *dec)
 			& 0x40) >> 6;
 
 	if ((debug & AVS2_DBG_SEND_PARAM_WITH_REG) == 0) {
-		dec->rpm_addr = kmalloc(RPM_BUF_SIZE, GFP_KERNEL);
+		dec->rpm_addr = dma_alloc_coherent(amports_get_dma_device(),
+			RPM_BUF_SIZE,
+			&dec->rpm_phy_addr, GFP_KERNEL);
 		if (dec->rpm_addr == NULL) {
 			pr_err("%s: failed to alloc rpm buffer\n", __func__);
 			return -1;
 		}
-
-		dec->rpm_phy_addr = dma_map_single(amports_get_dma_device(),
-			dec->rpm_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
-		if (dma_mapping_error(amports_get_dma_device(),
-			dec->rpm_phy_addr)) {
-			pr_err("%s: failed to map rpm buffer\n", __func__);
-			kfree(dec->rpm_addr);
-			dec->rpm_addr = NULL;
-			return -1;
-		} else {
-			avs2_print(dec, AVS2_DBG_BUFMGR,
-				"rpm_phy_addr %x\n", (u32) dec->rpm_phy_addr);
-		}
-
+		avs2_print(dec, AVS2_DBG_BUFMGR,
+			"rpm_phy_addr %x\n", (u32) dec->rpm_phy_addr);
 		dec->rpm_ptr = dec->rpm_addr;
 	}
 
@@ -3907,17 +3896,7 @@ static int avs2_local_init(struct AVS2Decoder_s *dec)
 		avs2_print(dec, AVS2_DBG_BUFMGR,
 			"%s, lmem_phy_addr %x\n",
 			__func__, (u32)dec->lmem_phy_addr);
-/*
-	dec->lmem_phy_addr = dma_map_single(amports_get_dma_device(),
-		dec->lmem_addr, LMEM_BUF_SIZE, DMA_BIDIRECTIONAL);
-	if (dma_mapping_error(amports_get_dma_device(),
-		dec->lmem_phy_addr)) {
-		pr_err("%s: failed to map lmem buffer\n", __func__);
-		kfree(dec->lmem_addr);
-		dec->lmem_addr = NULL;
-		return -1;
-	}
-*/
+
 	dec->lmem_ptr = dec->lmem_addr;
 
 
@@ -3930,15 +3909,6 @@ static int avs2_local_init(struct AVS2Decoder_s *dec)
 		return -1;
 	}
 	memset(dec->frame_mmu_map_addr, 0, get_frame_mmu_map_size(dec));
-/*	dec->frame_mmu_map_phy_addr = dma_map_single(amports_get_dma_device(),
-	dec->frame_mmu_map_addr, FRAME_MMU_MAP_SIZE, DMA_BIDIRECTIONAL);
-	if (dma_mapping_error(amports_get_dma_device(),
-	dec->frame_mmu_map_phy_addr)) {
-		pr_err("%s: failed to map count_buffer\n", __func__);
-		kfree(dec->frame_mmu_map_addr);
-		dec->frame_mmu_map_addr = NULL;
-		return -1;
-	}*/
 #endif
 
 	ret = 0;
@@ -5417,12 +5387,6 @@ static irqreturn_t vavs2_isr_thread_fn(int irq, void *data)
 			get_rpm_param(
 				&dec->avs2_dec.param);
 		} else {
-			PRINT_LINE();
-			dma_sync_single_for_cpu(
-				amports_get_dma_device(),
-				dec->rpm_phy_addr,
-				RPM_BUF_SIZE,
-				DMA_FROM_DEVICE);
 
 			for (i = 0; i < (RPM_END - RPM_BEGIN); i += 4) {
 				int ii;
@@ -6003,12 +5967,6 @@ static void vavs2_put_timer_func(unsigned long arg)
 	}
 	if (debug & AVS2_DBG_DUMP_RPM_BUF) {
 		int i;
-		dma_sync_single_for_cpu(
-			amports_get_dma_device(),
-			dec->rpm_phy_addr,
-			RPM_BUF_SIZE,
-			DMA_FROM_DEVICE);
-
 		pr_info("RPM:\n");
 		for (i = 0; i < RPM_BUF_SIZE; i += 4) {
 			int ii;
@@ -6025,12 +5983,6 @@ static void vavs2_put_timer_func(unsigned long arg)
 	}
 	if (debug & AVS2_DBG_DUMP_LMEM_BUF) {
 		int i;
-		dma_sync_single_for_cpu(
-			amports_get_dma_device(),
-			dec->lmem_phy_addr,
-			LMEM_BUF_SIZE,
-			DMA_FROM_DEVICE);
-
 		pr_info("LMEM:\n");
 		for (i = 0; i < LMEM_BUF_SIZE; i += 4) {
 			int ii;
diff --git a/drivers/frame_provider/decoder/h265/vh265.c b/drivers/frame_provider/decoder/h265/vh265.c
index 91e91c9..fd4bcd7 100644
--- a/drivers/frame_provider/decoder/h265/vh265.c
+++ b/drivers/frame_provider/decoder/h265/vh265.c
@@ -5421,11 +5421,6 @@ static void set_aux_data(struct hevc_state_s *hevc,
 
 	if (hevc->aux_data_dirty ||
 		hevc->m_ins_flag == 0) {
-		dma_sync_single_for_cpu(
-		amports_get_dma_device(),
-		hevc->aux_phy_addr,
-		hevc->prefix_aux_size + hevc->suffix_aux_size,
-		DMA_FROM_DEVICE);
 
 		hevc->aux_data_dirty = 0;
 	}
@@ -6962,23 +6957,21 @@ static void hevc_local_uninit(struct hevc_state_s *hevc)
 		uninit_detrefill_buf(hevc);
 #endif
 	if (hevc->aux_addr) {
-		dma_unmap_single(amports_get_dma_device(),
-			hevc->aux_phy_addr,
-			hevc->prefix_aux_size + hevc->suffix_aux_size,
-			DMA_FROM_DEVICE);
-		kfree(hevc->aux_addr);
+		dma_free_coherent(amports_get_dma_device(),
+				hevc->prefix_aux_size + hevc->suffix_aux_size, hevc->aux_addr,
+					hevc->aux_phy_addr);
 		hevc->aux_addr = NULL;
 	}
 	if (hevc->rpm_addr) {
-		dma_unmap_single(amports_get_dma_device(),
-			hevc->rpm_phy_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
-		kfree(hevc->rpm_addr);
+		dma_free_coherent(amports_get_dma_device(),
+				RPM_BUF_SIZE, hevc->rpm_addr,
+					hevc->rpm_phy_addr);
 		hevc->rpm_addr = NULL;
 	}
 	if (hevc->lmem_addr) {
-		dma_unmap_single(amports_get_dma_device(),
-			hevc->lmem_phy_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
-		kfree(hevc->lmem_addr);
+		dma_free_coherent(amports_get_dma_device(),
+				RPM_BUF_SIZE, hevc->lmem_addr,
+					hevc->lmem_phy_addr);
 		hevc->lmem_addr = NULL;
 	}
 
@@ -7029,22 +7022,12 @@ static int hevc_local_init(struct hevc_state_s *hevc)
 	video_signal_type = hevc->video_signal_type;
 
 	if ((get_dbg_flag(hevc) & H265_DEBUG_SEND_PARAM_WITH_REG) == 0) {
-		hevc->rpm_addr = kmalloc(RPM_BUF_SIZE, GFP_KERNEL);
+		hevc->rpm_addr = dma_alloc_coherent(amports_get_dma_device(),
+				RPM_BUF_SIZE, &hevc->rpm_phy_addr, GFP_KERNEL);
 		if (hevc->rpm_addr == NULL) {
 			pr_err("%s: failed to alloc rpm buffer\n", __func__);
 			return -1;
 		}
-
-		hevc->rpm_phy_addr = dma_map_single(amports_get_dma_device(),
-			hevc->rpm_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
-		if (dma_mapping_error(amports_get_dma_device(),
-			hevc->rpm_phy_addr)) {
-			pr_err("%s: failed to map rpm buffer\n", __func__);
-			kfree(hevc->rpm_addr);
-			hevc->rpm_addr = NULL;
-			return -1;
-		}
-
 		hevc->rpm_ptr = hevc->rpm_addr;
 	}
 
@@ -7055,37 +7038,20 @@ static int hevc_local_init(struct hevc_state_s *hevc)
 		hevc->prefix_aux_size = AUX_BUF_ALIGN(prefix_aux_buf_size);
 		hevc->suffix_aux_size = AUX_BUF_ALIGN(suffix_aux_buf_size);
 		aux_buf_size = hevc->prefix_aux_size + hevc->suffix_aux_size;
-		hevc->aux_addr = kmalloc(aux_buf_size, GFP_KERNEL);
+		hevc->aux_addr =dma_alloc_coherent(amports_get_dma_device(),
+				aux_buf_size, &hevc->aux_phy_addr, GFP_KERNEL);
 		if (hevc->aux_addr == NULL) {
 			pr_err("%s: failed to alloc rpm buffer\n", __func__);
 			return -1;
 		}
-
-		hevc->aux_phy_addr = dma_map_single(amports_get_dma_device(),
-			hevc->aux_addr, aux_buf_size, DMA_FROM_DEVICE);
-		if (dma_mapping_error(amports_get_dma_device(),
-			hevc->aux_phy_addr)) {
-			pr_err("%s: failed to map rpm buffer\n", __func__);
-			kfree(hevc->aux_addr);
-			hevc->aux_addr = NULL;
-			return -1;
-		}
 	}
 
-	hevc->lmem_addr = kmalloc(LMEM_BUF_SIZE, GFP_KERNEL);
+	hevc->lmem_addr = dma_alloc_coherent(amports_get_dma_device(),
+				LMEM_BUF_SIZE, &hevc->lmem_phy_addr, GFP_KERNEL);
 	if (hevc->lmem_addr == NULL) {
 		pr_err("%s: failed to alloc lmem buffer\n", __func__);
 		return -1;
 	}
-	hevc->lmem_phy_addr = dma_map_single(amports_get_dma_device(),
-		hevc->lmem_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
-	if (dma_mapping_error(amports_get_dma_device(),
-		hevc->lmem_phy_addr)) {
-		pr_err("%s: failed to map lmem buffer\n", __func__);
-		kfree(hevc->lmem_addr);
-		hevc->lmem_addr = NULL;
-		return -1;
-	}
 	hevc->lmem_ptr = hevc->lmem_addr;
 
 	if (hevc->mmu_enable) {
@@ -9514,11 +9480,6 @@ pic_done:
 			if (get_dbg_flag(hevc) & H265_DEBUG_SEND_PARAM_WITH_REG)
 				get_rpm_param(&hevc->param);
 			else {
-				dma_sync_single_for_cpu(
-				amports_get_dma_device(),
-				hevc->rpm_phy_addr,
-				RPM_BUF_SIZE,
-				DMA_FROM_DEVICE);
 
 				for (i = 0; i < (RPM_END - RPM_BEGIN); i += 4) {
 					int ii;
@@ -9530,11 +9491,6 @@ pic_done:
 					}
 				}
 #ifdef SEND_LMEM_WITH_RPM
-				dma_sync_single_for_cpu(
-					amports_get_dma_device(),
-					hevc->lmem_phy_addr,
-					LMEM_BUF_SIZE,
-					DMA_FROM_DEVICE);
 				check_head_error(hevc);
 #endif
 			}
@@ -9563,11 +9519,7 @@ pic_done:
 #endif
 				aux_data_is_avaible(hevc)
 				) {
-				dma_sync_single_for_cpu(
-				amports_get_dma_device(),
-				hevc->aux_phy_addr,
-				hevc->prefix_aux_size + hevc->suffix_aux_size,
-				DMA_FROM_DEVICE);
+
 				if (get_dbg_flag(hevc) &
 					H265_DEBUG_BUFMGR_MORE)
 					dump_aux_buf(hevc);
@@ -9828,12 +9780,6 @@ static irqreturn_t vh265_isr(int irq, void *data)
 
 	debug_tag = READ_HREG(DEBUG_REG1);
 	if (debug_tag & 0x10000) {
-		dma_sync_single_for_cpu(
-			amports_get_dma_device(),
-			hevc->lmem_phy_addr,
-			LMEM_BUF_SIZE,
-			DMA_FROM_DEVICE);
-
 		hevc_print(hevc, 0,
 			"LMEM<tag %x>:\n", READ_HREG(DEBUG_REG1));
 
diff --git a/drivers/frame_provider/decoder/vp9/vvp9.c b/drivers/frame_provider/decoder/vp9/vvp9.c
index d884141..fab34a5 100644
--- a/drivers/frame_provider/decoder/vp9/vvp9.c
+++ b/drivers/frame_provider/decoder/vp9/vvp9.c
@@ -6058,10 +6058,10 @@ static void vp9_local_uninit(struct VP9Decoder_s *pbi)
 	pbi->rpm_ptr = NULL;
 	pbi->lmem_ptr = NULL;
 	if (pbi->rpm_addr) {
-		dma_unmap_single(amports_get_dma_device(),
-			pbi->rpm_phy_addr, RPM_BUF_SIZE,
-				DMA_FROM_DEVICE);
-		kfree(pbi->rpm_addr);
+		dma_free_coherent(amports_get_dma_device(),
+					RPM_BUF_SIZE,
+					pbi->rpm_addr,
+					pbi->rpm_phy_addr);
 		pbi->rpm_addr = NULL;
 	}
 	if (pbi->lmem_addr) {
@@ -6213,22 +6213,14 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 			& 0x40) >> 6;
 
 	if ((debug & VP9_DEBUG_SEND_PARAM_WITH_REG) == 0) {
-		pbi->rpm_addr = kmalloc(RPM_BUF_SIZE, GFP_KERNEL);
+		pbi->rpm_addr = dma_alloc_coherent(amports_get_dma_device(),
+				RPM_BUF_SIZE,
+				&pbi->rpm_phy_addr, GFP_KERNEL);
 		if (pbi->rpm_addr == NULL) {
 			pr_err("%s: failed to alloc rpm buffer\n", __func__);
 			return -1;
 		}
 
-		pbi->rpm_phy_addr = dma_map_single(amports_get_dma_device(),
-			pbi->rpm_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
-		if (dma_mapping_error(amports_get_dma_device(),
-			pbi->rpm_phy_addr)) {
-			pr_err("%s: failed to map rpm buffer\n", __func__);
-			kfree(pbi->rpm_addr);
-			pbi->rpm_addr = NULL;
-			return -1;
-		}
-
 		pbi->rpm_ptr = pbi->rpm_addr;
 	}
 
@@ -6239,17 +6231,6 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 		pr_err("%s: failed to alloc lmem buffer\n", __func__);
 		return -1;
 	}
-/*
- *		pbi->lmem_phy_addr = dma_map_single(amports_get_dma_device(),
- *			pbi->lmem_addr, LMEM_BUF_SIZE, DMA_BIDIRECTIONAL);
- *		if (dma_mapping_error(amports_get_dma_device(),
- *			pbi->lmem_phy_addr)) {
- *			pr_err("%s: failed to map lmem buffer\n", __func__);
- *			kfree(pbi->lmem_addr);
- *			pbi->lmem_addr = NULL;
- *			return -1;
- *		}
- */
 		pbi->lmem_ptr = pbi->lmem_addr;
 
 	pbi->prob_buffer_addr = dma_alloc_coherent(amports_get_dma_device(),
@@ -6260,16 +6241,6 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 		return -1;
 	}
 	memset(pbi->prob_buffer_addr, 0, PROB_BUF_SIZE);
-/*	pbi->prob_buffer_phy_addr = dma_map_single(amports_get_dma_device(),
- *	pbi->prob_buffer_addr, PROB_BUF_SIZE, DMA_BIDIRECTIONAL);
- *	if (dma_mapping_error(amports_get_dma_device(),
- *	pbi->prob_buffer_phy_addr)) {
- *		pr_err("%s: failed to map prob_buffer\n", __func__);
- *		kfree(pbi->prob_buffer_addr);
- *		pbi->prob_buffer_addr = NULL;
- *		return -1;
- *	}
- */
 	pbi->count_buffer_addr = dma_alloc_coherent(amports_get_dma_device(),
 				COUNT_BUF_SIZE,
 				&pbi->count_buffer_phy_addr, GFP_KERNEL);
@@ -6278,16 +6249,7 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 		return -1;
 	}
 	memset(pbi->count_buffer_addr, 0, COUNT_BUF_SIZE);
-/*	pbi->count_buffer_phy_addr = dma_map_single(amports_get_dma_device(),
-	pbi->count_buffer_addr, COUNT_BUF_SIZE, DMA_BIDIRECTIONAL);
-	if (dma_mapping_error(amports_get_dma_device(),
-		pbi->count_buffer_phy_addr)) {
-		pr_err("%s: failed to map count_buffer\n", __func__);
-		kfree(pbi->count_buffer_addr);
-		pbi->count_buffer_addr = NULL;
-		return -1;
-	}
-*/
+
 	if (pbi->mmu_enable) {
 		u32 mmu_map_size = vvp9_frame_mmu_map_size(pbi);
 		pbi->frame_mmu_map_addr =
@@ -6299,15 +6261,6 @@ static int vp9_local_init(struct VP9Decoder_s *pbi)
 			return -1;
 		}
 		memset(pbi->frame_mmu_map_addr, 0, COUNT_BUF_SIZE);
-	/*	pbi->frame_mmu_map_phy_addr = dma_map_single(amports_get_dma_device(),
-		pbi->frame_mmu_map_addr, mmu_map_size, DMA_BIDIRECTIONAL);
-		if (dma_mapping_error(amports_get_dma_device(),
-		pbi->frame_mmu_map_phy_addr)) {
-			pr_err("%s: failed to map count_buffer\n", __func__);
-			kfree(pbi->frame_mmu_map_addr);
-			pbi->frame_mmu_map_addr = NULL;
-			return -1;
-		}*/
 	}
 #ifdef SUPPORT_FB_DECODING
 	if (pbi->m_ins_flag && stage_buf_num > 0) {
@@ -7379,11 +7332,6 @@ static irqreturn_t vvp9_isr_thread_fn(int irq, void *data)
 	if (debug & VP9_DEBUG_SEND_PARAM_WITH_REG) {
 		get_rpm_param(&vp9_param);
 	} else {
-		dma_sync_single_for_cpu(
-			amports_get_dma_device(),
-			pbi->rpm_phy_addr,
-			RPM_BUF_SIZE,
-			DMA_FROM_DEVICE);
 #ifdef SUPPORT_FB_DECODING
 		if (pbi->used_stage_buf_num > 0) {
 			reset_process_time(pbi);
@@ -7494,12 +7442,6 @@ static irqreturn_t vvp9_isr(int irq, void *data)
 
 	debug_tag = READ_HREG(DEBUG_REG1);
 	if (debug_tag & 0x10000) {
-		dma_sync_single_for_cpu(
-			amports_get_dma_device(),
-			pbi->lmem_phy_addr,
-			LMEM_BUF_SIZE,
-			DMA_FROM_DEVICE);
-
 		pr_info("LMEM<tag %x>:\n", READ_HREG(DEBUG_REG1));
 		for (i = 0; i < 0x400; i += 4) {
 			int ii;
